const jwt = require('jsonwebtoken');
const config = require('../config/config');
const supabaseAuthService = require('../services/supabaseAuthService');

/**
 * Supabase Authentication Middleware
 * Mirrors the functionality of the Firebase auth middleware
 * for seamless migration
 */

/**
 * Middleware to verify JWT token and attach user to request
 * Works with tokens generated by Supabase Auth service
 */
exports.verifyToken = async (req, res, next) => {
  try {
    // Get token from header
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({
        success: false,
        message: 'Access denied. No token provided.'
      });
    }
    
    // Extract token from Bearer format
    const token = authHeader.split(' ')[1];
    
    // Verify token using Supabase Auth service
    const result = await supabaseAuthService.verifyToken(token);
    
    if (!result.success) {
      return res.status(401).json({
        success: false,
        message: 'Invalid token',
        error: result.error
      });
    }
    
    // Attach user info to request (same format as Firebase middleware)
    req.user = {
      uid: result.user.uid,
      email: result.user.email,
      role: result.user.role,
      displayName: result.user.displayName
    };
    
    next();
  } catch (error) {
    console.error('Supabase token verification failed:', error.message);
    return res.status(401).json({
      success: false,
      message: 'Invalid token',
      error: error.message
    });
  }
};

/**
 * Middleware to check if user has admin role
 * Must be used after verifyToken middleware
 */
exports.requireAdmin = (req, res, next) => {
  if (!req.user) {
    return res.status(401).json({
      success: false,
      message: 'Authentication required'
    });
  }
  
  if (req.user.role !== 'admin') {
    return res.status(403).json({
      success: false,
      message: 'Access denied. Admin role required.'
    });
  }
  
  next();
};

/**
 * Middleware to check if user has specific role
 * Must be used after verifyToken middleware
 */
exports.requireRole = (requiredRole) => {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        message: 'Authentication required'
      });
    }
    
    if (req.user.role !== requiredRole) {
      return res.status(403).json({
        success: false,
        message: `Access denied. ${requiredRole} role required.`
      });
    }
    
    next();
  };
};

/**
 * Hybrid middleware that works with both Firebase and Supabase tokens
 * This allows gradual migration without breaking existing functionality
 */
exports.verifyTokenHybrid = async (req, res, next) => {
  try {
    // Get token from header
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({
        success: false,
        message: 'Access denied. No token provided.'
      });
    }
    
    // Extract token from Bearer format
    const token = authHeader.split(' ')[1];
    
    // First try Supabase auth verification
    const supabaseResult = await supabaseAuthService.verifyToken(token);
    
    if (supabaseResult.success) {
      // Supabase token verified successfully
      req.user = {
        uid: supabaseResult.user.uid,
        email: supabaseResult.user.email,
        role: supabaseResult.user.role,
        displayName: supabaseResult.user.displayName,
        authProvider: 'supabase'
      };
      return next();
    }
    
    // If Supabase verification fails, try Firebase verification
    try {
      const decoded = jwt.verify(token, config.jwtSecret);
      
      // Firebase token verified successfully
      req.user = {
        uid: decoded.uid,
        email: decoded.email,
        role: decoded.role || 'user',
        displayName: decoded.displayName || '',
        authProvider: 'firebase'
      };
      return next();
    } catch (firebaseError) {
      // Both verifications failed
      return res.status(401).json({
        success: false,
        message: 'Invalid token',
        error: 'Token verification failed for both Supabase and Firebase'
      });
    }
    
  } catch (error) {
    console.error('Hybrid token verification failed:', error.message);
    return res.status(401).json({
      success: false,
      message: 'Invalid token',
      error: error.message
    });
  }
};

/**
 * Middleware to log authentication provider for monitoring migration
 */
exports.logAuthProvider = (req, res, next) => {
  if (req.user && req.user.authProvider) {
    console.log(`Auth Provider: ${req.user.authProvider} for user: ${req.user.email}`);
  }
  next();
};
